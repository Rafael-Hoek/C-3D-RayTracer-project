def material(c)
{
  Materials.uniform( [ "ambient": c * 1,
                       "diffuse": c * 0.8,
                       "specular": Colors.white() * 0.2,
                       "specular_exponent": 10,
                       "light_filtering": c,
                       "transparency": 0,
                       "refractive_index": 0 ] )
}

def scene_at(now) {

	var x = Animations.animate(-7, 7, seconds(5))
	
	var camera = Cameras.perspective( [ "eye": pos(0,x[now],20),
	                                    "look_at": pos(0,0,0) ] )
	                                    
	var primitives = []
	
	primitives.push_back(decorate(material(Colors.red()*1.00 + Colors.green()*0.00),translate(vec(0,5.0,0),xz_disk(5.0))))
	primitives.push_back(decorate(material(Colors.red()*0.95 + Colors.green()*0.05),translate(vec(0,4.5,0),xz_disk(4.5))))
	primitives.push_back(decorate(material(Colors.red()*0.90 + Colors.green()*0.10),translate(vec(0,4.0,0),xz_disk(4.0))))
	primitives.push_back(decorate(material(Colors.red()*0.85 + Colors.green()*0.15),translate(vec(0,3.5,0),xz_disk(3.5))))
	primitives.push_back(decorate(material(Colors.red()*0.80 + Colors.green()*0.20),translate(vec(0,3.0,0),xz_disk(3.0))))
	primitives.push_back(decorate(material(Colors.red()*0.75 + Colors.green()*0.25),translate(vec(0,2.5,0),xz_disk(2.5))))
	primitives.push_back(decorate(material(Colors.red()*0.70 + Colors.green()*0.30),translate(vec(0,2.0,0),xz_disk(2.0))))
	primitives.push_back(decorate(material(Colors.red()*0.65 + Colors.green()*0.35),translate(vec(0,1.5,0),xz_disk(1.5))))
	primitives.push_back(decorate(material(Colors.red()*0.60 + Colors.green()*0.40),translate(vec(0,1.0,0),xz_disk(1.0))))
	primitives.push_back(decorate(material(Colors.red()*0.55 + Colors.green()*0.45),translate(vec(0,0.5,0),xz_disk(0.5))))
	
	primitives.push_back(decorate(material(Colors.green()*1.00 + Colors.red()*0.00),translate(vec(0,-5.0,0),xz_disk(5.0))))
	primitives.push_back(decorate(material(Colors.green()*0.95 + Colors.red()*0.05),translate(vec(0,-4.5,0),xz_disk(4.5))))
	primitives.push_back(decorate(material(Colors.green()*0.90 + Colors.red()*0.10),translate(vec(0,-4.0,0),xz_disk(4.0))))
	primitives.push_back(decorate(material(Colors.green()*0.85 + Colors.red()*0.15),translate(vec(0,-3.5,0),xz_disk(3.5))))
	primitives.push_back(decorate(material(Colors.green()*0.80 + Colors.red()*0.20),translate(vec(0,-3.0,0),xz_disk(3.0))))
	primitives.push_back(decorate(material(Colors.green()*0.75 + Colors.red()*0.25),translate(vec(0,-2.5,0),xz_disk(2.5))))
	primitives.push_back(decorate(material(Colors.green()*0.70 + Colors.red()*0.30),translate(vec(0,-2.0,0),xz_disk(2.0))))
	primitives.push_back(decorate(material(Colors.green()*0.65 + Colors.red()*0.35),translate(vec(0,-1.5,0),xz_disk(1.5))))
	primitives.push_back(decorate(material(Colors.green()*0.60 + Colors.red()*0.40),translate(vec(0,-1.0,0),xz_disk(1.0))))
	primitives.push_back(decorate(material(Colors.green()*0.55 + Colors.red()*0.45),translate(vec(0,-0.5,0),xz_disk(0.5))))
	
	
	  
	
	var root = union(primitives)
	
	var lights = [ Lights.omnidirectional( pos(0,0,5), Colors.white() * 0.6 ) ]
	
	var scene = create_scene(camera, root, lights)
}
var raytracer = Raytracers.v1()

var renderer = Renderers.standard( [ "width": 500,
                                     "height": 500,
                                     "sampler": Samplers.stratified(1,1),
                                     "ray_tracer": raytracer ] )

pipeline( scene_animation(scene_at, seconds(5)),
          [ Pipeline.animation(30),
            Pipeline.renderer(renderer),
            Pipeline.studio()] )